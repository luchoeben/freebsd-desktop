#!/bin/sh

###################
# Userdefined variables - Change anything according to your needs here
#

LANGUAGE=en_EN.UTF-8
COUNTRYCODE=nl
CHARSET=UTF-8

NTPSERVER=nl.pool.ntp.org

AUTOBOOTDELAY=3

MYSHELL=/bin/zsh

#Here you can choose KDE, AWESOME, LXDE or LUMINA
DESKTOP="KDE"

#If this is YES we will install a lot of stuff, like browser, office...
MAKEITREALLYFAT="YES"

# Change this to YES if you are running a system with a modern nvidia-graphics-card. 
NVIDIA="NO"

###################
# Don't change anything behind this line if you don't know what you are doing
#

#+ internal variables
#
CRONTAB=/etc/crontab
RCCONF=/etc/rc.conf
PROFILE=/etc/profile
LOGINCONF=/etc/login.conf
ADDUSERCONF=/etc/adduser.conf
GLOBALEXAMPLES=/usr/local/share/examples
CONFIGEXAMPLES=$GLOBALEXAMPLES/rakors_config
LOADERCONF=/boot/loader.conf
PASSWD=/etc/passwd
SKELETONS=/usr/share/skel
SYSCTL=/etc/sysctl.conf
ANACRONTAB=/usr/local/etc/anacrontab
XORGCONFD=/usr/local/etc/X11/xorg.conf.d
TTYS=/etc/ttys
XSETUP=/usr/local/lib/X11/xdm/Xsetup_0
DEVFSRULES=/etc/devfs.rules
DEVFSCONF=/etc/devfs.conf
CLASSDESC=LocalUsers
CLASSNAME=localized

PACKAGES="x11/xorg editors/vim sysutils/anacron"
FATPACKAGES="www/chromium editors/libreoffice sysutils/tmux devel/git-gui graphics/gimp"

INSTALLGTKTHEME="YES"

#+ check for root
#
if [ `id -u` -ne 0 ]; then
	echo "This script must be run as root."
	exit 1
fi

#+ check arguments
#
args=`getopt m $*`
if [ $? -ne 0 ]; then
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -m      set some options interactively"
    echo ""
    exit 2;
fi

set -- $args

while true; do
    case "$1" in
        -m ) MANUAL="YES";
             shift;
             ;;
        -- ) 
            shift; break
            ;;
    esac
done

#+ set settings interactively
#
if [ "$MANUAL" == "YES" ]; then
    #+ Ask for desktop
    #
    while true; do
        echo ""
        echo -n "Which Desktop would you like to use [KDE|LXDE|AWESOME|LUMINA]: "; read DESKTOP;
        case $DESKTOP in
            KDE|LXDE|LUMINA|AWESOME ) echo "Desktop $DESKTOP selected..."; 
            break;
                ;;
            * ) echo "Wrong answer. Please select one of the following."; 
        esac
    done

    #+ Ask for making a fat installation
    #
    while true; do
        echo ""
        echo -n "Install some additional packages like browser, office, etc. [y/n]: "; read FAT;
        case $FAT in
            [y]* ) echo "Additional software will be installed"; MAKEITREALLYFAT="YES"
                break;
                ;;
            [n]* ) echo "Additional software will not be installed"; unset MAKEITREALLYFAT;
                break;
                ;;
        esac
    done

    #+ Ask for setting manual languagesettings
    #
    while true; do
        echo ""
        echo -n "Do you want tu use $LANGUAGE as language? [y/n]: "; read USELANG;
        case $USELANG in
            [y]* ) echo "Using $LANGUAGE as language."; 
                break;
                ;;
            [n]* ) echo "You can now select your own settings for the language";
                while true; do
                    echo -n "Languagecode to use (current: $LANGUAGE): "; read NEWLANGUAGE;
                    echo -n "Countrycode to use (current: $COUNTRYCODE): "; read NEWCOUNTRYCODE;
                    echo -n "Charset use (current: $CHARSET): "; read NEWCHARSET;
                    
                    if ! [ -z "$NEWLANGUAGE" ]; then
                        LANGUAGE=$NEWLANGUAGE
                    fi
                    if ! [ -z "$NEWCOUNTRYCODE" ]; then 
                        COUNTRYCODE=$NEWCOUNTRYCODE;
                    fi
                    if ! [ -z "$NEWCHARSET" ]; then 
                        CHARSET=$NEWCHARSET;
                    fi

                    echo "You selected for the language: $LANGUAGE";
                    echo "You selected for the coutrycode: $COUNTRYCODE";
                    echo "You selected for the charset: $CHARSET";
                    echo "Do you want to proceed with these settings? [y/n]: "; read LANGOK;
                    case $LANGOK in
                        [y]* ) break;
                            ;;
                    esac
                done
                break;
                ;;
        esac
    done
    break;

    #+ Ask for nVIdia
    #
    while true; do
        echo ""
        echo -n "Do you have a modern nVidia-gpu installed? [y/n]: "; read NVIDIAINSTALLED
        case $NVIDIAINSTALLED in
            [y]* ) echo "nVidia-driver will be installed";
                    NVIDIA="YES";
                    break;
                    ;;
            [n]* ) echo "no nVidia-driver will be installed"
                    NVIDIA="NO"
                    break;
                    ;;
        esac
    done
fi

#+ freebsd-update
#
echo "searching for updates... please stand by"
if freebsd-update fetch | grep -q "^No updates needed"; then
	echo "+ No Update to install"
else
	freebsd-update install
	echo "+ Updates installed"
fi


#+ install packages
#
env ASSUME_ALWAYS_YES=yes pkg bootstrap
if [ "$DESKTOP" == "KDE" ]; then
	PACKAGES="$PACKAGES x11/kde4"
	PACKAGESUFFIX=-kde-l10n
	PACKAGENAME=${COUNTRYCODE}${PACKAGESUFFIX}
	if pkg search ${PACKAGENAME} | grep -q "${PACKAGENAME}"; then
		PACKAGES="$PACKAGES $PACKAGENAME"
	else
		echo "! There is no KDE-languagepack for $COUNTRYCODE. Please choose one and install it by hand if needed."
	fi
	DMSTARTCOMMAND="/usr/local/bin/startkde4"
elif [ "$DESKTOP" == "AWESOME" ]; then
	PACKAGES="$PACKAGES x11-wm/awesome x11/xdm x11/xlockmore"
	DMSTARTCOMMAND="/usr/local/bin/awesome"
elif [ "$DESKTOP" == "LUMINA" ]; then
	PACKAGES="$PACKAGES x11/lumina x11/lumina-i18n x11/slim"
	DMSTARTCOMMAND="/usr/local/bin/Lumina-DE"
elif [ "$DESKTOP" == "LXDE" ]; then
	PACKAGES="$PACKAGES x11/lxde-meta x11/slim"
	DMSTARTCOMMAND="/usr/local/bin/startlxde"
else
	echo "! You have not chosen a desktop. The installation will not be ready after this script!"
	echo "! Exiting this script. Please use a valid key for DESKTOP"
	exit 2
fi
if dmesg | grep -q -E "^acpi.*VBOX"; then
    PACKAGES="$PACKAGES emulators/virtualbox-ose-additions"
fi
if [ "$NVIDIA" == "YES" ]; then
    PACKAGES="$PACKAGES x11/nvidia-driver"
fi
if echo $MAKEITREALLYFAT | grep -q -i "YES"; then
    PACKAGES="$PACKAGES $FATPACKAGES"
fi
if echo $PACKAGES | grep -q "editors/libreoffice"; then
    PACKAGESUFFIX=-libreoffice
    PACKAGENAME=${COUNTRYCODE}${PACKAGESUFFIX}
    if pkg search ${PACKAGENAME} | grep -q "${PACKAGENAME}"; then
	PACKAGES="$PACKAGES $PACKAGENAME"
    fi
fi
if [ "$INSTALLGTKTHEME" == "YES" ]; then
	PACKAGES="$PACKAGES x11-themes/gtk-oxygen-engine"
fi
pkg install -y $PACKAGES && \
echo "+ packages installed" ||Â \
echo "! Error while installing packages" | tee -a $ERRORLOG


#+ manipulations needed by packages
#
# chromium
if echo $PACKAGES | grep -q "www/chromium"; then
    if ! grep -q "^kern.ipc.shm_allow_removed" $SYSCTL; then
        echo "kern.ipc.shm_allow_removed=1" >> $SYSCTL
        echo "+ sysctl variable set to run chromium"
    fi
fi
# virtualbox-additions
if echo $PACKAGES | grep -q "emulators/virtualbox-ose-additions"; then
    if ! grep -q "^vbox" $RCCONF; then
        echo "vboxguest_enable=\"YES\"" >> $RCCONF
        echo "vboxservice_enable=\"YES\"" >> $RCCONF
	    echo "vboxservice_flags=\"--disable-timesync\"" >> $RCCONF
        echo "+ Virtualbox guest additions activated"
    fi
fi
# xdm
if echo $PACKAGES | grep -q "x11/xdm"; then
	cp $TTYS ${TTYS}_old && \
	cat ${TTYS}_old | sed -E -e "s/^(ttyv8[[:space:]]+.*xdm.*xterm[[:space:]]+)off(.*)/\\1on\\2/" > $TTYS && \
	rm ${TTYS}_old && \
	echo "+ xdm activated."
	cp $XSETUP ${XSETUP}_old && \
	cat ${XSETUP}_old | sed -E -e "s/^(xconsole.*)$/#\\1/" > $XSETUP && \
	rm ${XSETUP}_old && \
	echo "+ xconsole deactivated in xdm."

fi
# slim
if echo $PACKAGES | grep -q "x11/slim"; then
	if grep -q "slim_enable" $RCCONF; then
		echo "! Slim is present in $RCCONF. Doing nothing"
	else
		echo "slim_enable=\"YES\"" >> $RCCONF
		echo "+ Slim activated."
		if grep -q "^hald_enable" $RCCONF; then
			echo "! hald already present"
		else
			echo "hald_enable=\"YES\"" >> $RCCONF
			echo "+ hald enabled in $RCCONF"
		fi
	fi
fi
# KDE
if [ "$DESKTOP" == "KDE" ]; then
	if grep -q "kdm4_enable" $RCCONF; then
		echo "! KDM is present in $RCCONF. Doing nothing"
	else
		echo "kdm4_enable=\"YES\"" >> $RCCONF
		echo "+ KDM activated."
		if grep -q "^hald_enable" $RCCONF; then
			echo "! hald already present"
		else
			echo "hald_enable=\"YES\"" >> $RCCONF
			echo "+ hald enabled in $RCCONF"
		fi
	fi
fi


#+ dbus enable
#
if grep -q "^dbus_enable" $RCCONF; then
	echo "! dbus already present"
else
	echo "dbus_enable=\"YES\"" >> $RCCONF
	echo "+ dbus enabled in $RCCONF"
fi


#+ anacron
#
ANACRON=/usr/local/sbin/anacron
if grep -q "$ANACRON$" $CRONTAB; then
	echo "! Anacron is already configured in $CRONTAB. Doing nothing."
else
	printf "0\t0\t*\t*\t*\troot\t$ANACRON" >> $CRONTAB
	echo "+ Anacron set in $CRONTAB"
fi 

if grep -q "anacron_enable=" $RCCONF; then
	echo "! Anacron is already configured in $RCCONF. Doing nothing."
else
	echo "anacron_enable=\"YES\"" >> $RCCONF
	echo "+ Anacron set in $RCCONF"
fi 
if grep -E -q "^[^#].*periodic" /etc/crontab; then
	cp $CRONTAB ${CRONTAB}_old
	cat ${CRONTAB}_old | sed -E -e "s/^(.*periodic (daily|weekly|monthly).*)/#\1/" > $CRONTAB
	echo "+ Deactivated the periodic-scripts in $CRONTAB"
else
	echo "! There is no activated periodic-script in $CRONTAB. Doing nothing."
fi


#+ language
#
if grep -q "^LANG=" $PROFILE; then
	echo "! LANG is already set in $PROFILE. Doing nothing."
else
	echo "LANG=$LANGUAGE; export LANG" >> $PROFILE
	echo "+ Language $LANGUAGE set in $PROFILE"
fi


if grep -q "^$CLASSNAME" $LOGINCONF; then
	echo "! $CLASSNAME is already present in $LOGINCONF. Doing nothing."
else
	printf "$CLASSNAME|$CLASSDESC:\\\\ \n" >> $LOGINCONF
	printf "\t:charset=$CHARSET:\\\\ \n" >> $LOGINCONF
	printf "\t:lang=$LANGUAGE:\\\\ \n" >> $LOGINCONF
	printf "\t:tc=default:\n" >> $LOGINCONF
	echo "+ $CLASSNAME set in $LOGINCONF"

	if cap_mkdb /etc/login.conf; then
		echo "+ Login-Database refreshed"
	else
		echo "! Could not refresh Login-Database"
	fi
	if grep -q "^defaultclass" $ADDUSERCONF; then
		echo "! defaultclass is already set. We will not set $CLASSNAME"
	else
		echo "defaultclass=$CLASSNAME" >> $ADDUSERCONF
		echo "+ $CLASSNAME set as defaultclass for new users"
	fi
fi

XORGKEYBOARDSNIPPET=$XORGCONFD/00-keyboard.conf
XORGKEYBOARDSECTION="Section \"InputClass\"\n\
\tIdentifier \"system-keyboard\"\n\
\tMatchIsKeyboard \"on\"\n\
\tOption \"XkbModel\" \"pc105\"\n\
\tOption \"XkbLayout\" \"$COUNTRYCODE\"\n\
EndSection"

if [ ! -e $XORGCONFD/*keyboard* ]; then
    printf "$XORGKEYBOARDSECTION" > $XORGKEYBOARDSNIPPET
    echo "+ Keyboardlayout $COUNTRYCODE set for Xorg"
else
    echo "! There seems to be a file in $XORGCONFD configuring your keyboard. Doing nothing"
fi


#+ nvidia - setting graphics-card
#
if [ "$NVIDIA" == "YES" ]; then
XORGNVIDIASNIPPET=$XORGCONFD/00-card.conf
XORGNVIDIASECTION="Section \"Device\"\n\
\tIdentifier\t\"Device0\"\n\
\tDriver\t\"nvidia\"\n\
\tVendorName\t\"NVIDIA Corporation\"\n\
EndSection"
	if [ ! -e $XORGCONFD/*card* ]; then
	    printf "$XORGNVIDIASECTION" > $XORGNVIDIASNIPPET
	    echo "+ Nvidia set for Xorg"
	else
	    echo "! There seems to be a file in $XORGCONFD configuring your card. Doing nothing"
	fi
    if ! grep -q "^linux_enable" $RCCONF; then
        echo "linux_enable=\"YES\"" >> $RCCONF
    fi
    if ! grep -q "^linux_enable" $RCCONF; then
        echo "linux_enable=\"YES\"" >> $RCCONF
    fi
    if ! grep -q "^nvidia_load" $LOADERCONF; then
        echo "nvidia_load=\"YES\"" >> $LOADERCONF
    fi

fi


#+ tcsh as default shell
#
if grep -q "^defaultshell" $ADDUSERCONF; then
	echo "! defaultshell is already set. We will not set $MYSHELL"
else
	echo "defaultshell=$MYSHELL" >> $ADDUSERCONF
	echo "+ $MYSHELL set as defaultshell for new users"
fi


#+ autoboot delay
#
if [ -e $LOADERCONF ] && grep -q "^autoboot_delay" $LOADERCONF; then
	echo "! Autoboot-delay already set. Doing nothing"
else
	echo "autoboot_delay=\"$AUTOBOOTDELAY\"" >> $LOADERCONF
	echo "+ Autobootdelay set to $AUTOBOOTDELAY seconds"
fi


#+ mount cd and usb devices as user
if grep -q "^vfs.usermount" $SYSCTL; then
else
    echo "vfs.usermount=1" >> $SYSCTL
fi
RULESETNAME=localrules
echo "[$RULESETNAME=10]"
echo "add path 'cd*' mode 0660 group operator"      >> $DEVFSRULES
echo "add path 'xpt*' mode 0660 group operator"     >> $DEVFSRULES
echo "add path 'pass*' mode 0660 group operator"    >> $DEVFSRULES
echo "add path 'da*s*' mode 0660 group operator"    >> $DEVFSRULES
echo "add path 'md*' mode 0660 group operator"      >> $DEVFSRULES
echo "add path 'video*' mode 0666 group operator"   >> $DEVFSRULES
echo "+ Devfs-ruleset set"

if grep -q "devfs_system_ruleset" $RCCONF; then
    echo "! Devfs-ruleset is present in $RCCONF. Doing nothing"
else
    echo "devfs_system_ruleset=\"$RULESETNAME\"" >> $RCCONF
    echo "+ Devfs-ruleset activated"
fi


#+ cdrom an dvd links
if [ -c /dev/cd0 ]; then
    echo "link cd0 cdrom" >> $DEVFSCONF
    echo "link cd0 dvd"   >> $DEVFSCONF
fi


#+ Powersavings
#
if grep -q "powerd_enable" $RCCONF; then
	echo "! CPU-Scaling is present in $RCCONF. Doing nothing"
else
	echo "powerd_enable=\"YES\"" >> $RCCONF
	echo "+ CPU-scaling activated."
fi


#+ ntp
#
if grep -q "ntpdate_enable" $RCCONF; then
	echo "! ntp  is present in $RCCONF. Doing nothing"
else
	echo "trying to set date/time via ntp-server..."
	if ntpdate $NTPSERVER; then
		echo "ntpdate_enable=\"YES\"" >> $RCCONF
		echo "+ ntp activated."
		if grep -q "^ntpdate_hosts" $RCCONF; then
			echo "! ntpdate_hosts is already set in $RCCONF. Doing nothing"
		else
			echo "ntpdate_hosts=\"$NTPSERVER\"" >> $RCCONF
			echo "+ ntpdate_hosts set to $NTPSERVER."
		fi
	else
		echo "! $NTPSERVER is not a valid ntp-server"
	fi
fi


#+ no Coredumps please
#
if grep -q "^kern.coredump" $SYSCTL; then
    echo "! Coredumps are already set. Doing nothing"
else
    echo "kern.coredump=0" >> $SYSCTL
    echo "+ Coredumps are turned off"
fi


#+ search for updates regularly
#
if ! grep -q -E "pkg[[:space:]]+upgrade" $ANACRONTAB; then
    printf "7\t10\tpkgupgrade\tpkg upgrade -n\n" >> $ANACRONTAB
    echo "+ root will be informed when there are new packages available"
else
    echo "! pkg upgrade already set in anacrontab"
fi
if ! grep -q -E "freebsd-update" $ANACRONTAB; then
    printf "7\t40\tfreebsd-update\tfreebsd-update cron\n" >> $ANACRONTAB
    echo "+ root will be informed when there are updates for FreeBSD available"
else
    echo "! freebsd-update already set in anacrontab"
fi


#+ clear tmp
#
VARIABLE=clear_tmp_enable
if grep -q -E "^[[:space:]]*$VARIABLE" $RCCONF; then
    echo "! $VARIABLE already set in $RCCONF"
else
    echo "$VARIABLE=\"YES\"" >> $RCCONF
fi


#+ fetch config examples
#
TMPZIPFILE=/tmp/master.zip
GITHUBURL=https://github.com/rakor/config/archive/master.zip
ZIPSUBFOLDER=config-master
if [ -d $CONFIGEXAMPLES ]; then
	echo "! $CONFIGEXAMPLES does already exist. Doing nothing."
else
	fetch --no-verify-peer -o $TMPZIPFILE $GITHUBURL
	unzip -q -d $GLOBALEXAMPLES $TMPZIPFILE
	mv $GLOBALEXAMPLES/$ZIPSUBFOLDER $CONFIGEXAMPLES
	rm $TMPZIPFILE
	echo "+ Example config-files fetched"
fi 


#+ Copy examples into skeleton
#
AWESOMECONFIGDIR=home/.config/awesome
AWESOMECONFIG=rc.lua
mkdir -p $SKELETONS/dot.config/awesome
cp $CONFIGEXAMPLES/$AWESOMECONFIGDIR/$AWESOMECONFIG $SKELETONS/dot.config/awesome
cp $CONFIGEXAMPLES/home/.vimrc $SKELETONS/dot.vimrc
cp -f $CONFIGEXAMPLES/home/.cshrc $SKELETONS/dot.cshrc


#+ Xdefaults
#
XDEFAULTSSKEL=dot.Xdefaults
if grep -q "^xterm\*....ground" $SKELETONS/$XDEFAULTSSKEL; then
    echo "! There are some colors set for xterm. Doing nothing"
else
    echo "xterm*foreground: rgb:a8/a8/a8" >> $SKELETONS/$XDEFAULTSSKEL
    echo "xterm*background: rgb:00/00/00" >> $SKELETONS/$XDEFAULTSSKEL
    echo "+ Colors for xterm set nicely"
fi


#+ xinitrc and xsession skeletons
XINITRCSKEL=dot.xinitrc
XSESSIONSKEL=dot.xsession
if [ -e $SKELETONS/$XINITRCSKEL ]; then
    echo "! There is a xinitrc skeleton available. Doing nothing"
else
    echo "export LANG=$LANGUAGE" >> $SKELETONS/$XINITRCSKEL
    echo "export MM_CHARSET=$CHARSET" >> $SKELETONS/$XINITRCSKEL
    echo "exec $DMSTARTCOMMAND" >> $SKELETONS/$XINITRCSKEL
    cp $SKELETONS/$XINITRCSKEL $SKELETONS/$XSESSIONSKEL
    echo "+ xinitrc and xsession skeleton prepared to launch $DMSTARTCOMMAND"
fi

#+ Set default gtk theme
#
GTKRCSKEL=dot.gtkrc-2.0
if [ "$INSTALLGTKTHEME" == "YES" ]; then
	echo "include \"/usr/local/share/themes/oxygen-gtk/gtk-2.0/gtkrc\"" >> $SKELETONS/$GTKRCSKEL
fi


#+ delete existing users
#
USERCOUNT=`awk -F : '{if ($3<2000 && $3>1000) {print $1}}' $PASSWD | wc -l | xargs` 
if [ $USERCOUNT  -ne 0 ]; then
	echo ""
	echo "There are $USERCOUNT users found on the system having uids between 1000 and 2000 (we assume this are normal users created by hand during installation)."
	echo "Changes beeing done to the system during this script will only take effect for newly created users. You can now delete those users and add them again later."
	echo "The found users are:"
	awk -F : '{if ($3<2000 && $3>1000) {print $1}}' $PASSWD 
	echo ""
	while true; do
		echo -n "Do you want to delete all those users? (You can add new users later) [y/n]: "; read answer
		case $answer in
			[y]* ) echo "Deleting users..."; awk -F : '{if ($3<2000 && $3>1000) {print $1}}' $PASSWD | xargs -I {} rmuser -y {}; break;;
			[n]* ) echo "The users will not be deleted."; break;;
		esac
	done
fi


#+ add an initial user
#
while true; do
	echo ""
	echo "Do you want to add an administrative user?"
	echo " The user will be added to 'wheel' and 'operator' and receive root-mails."
	echo -n "The uid:gid will be "; echo `pw nextuser`; 
	echo -n " Add user [y/n]: "; read answer1;
	case $answer1 in
		[y]* )	while true; do
				echo -n "Username: "
				read username
				if echo $username | grep -q -E "^[a-z][-a-z0-9]*$"; then
					break;
				else
					echo "Username not valid"
				fi
			done
			while true; do
				echo -n "Password: "; stty -echo; read password; stty echo; echo ""
				echo -n "Password (again): "; stty -echo; read password2; stty echo; echo ""
				if [ $password == $password2 ]; then
					break;
				else
					echo "The passwords did not match, please try again."
				fi
			done
			while true; do
				echo -n "Should we add the user $username ["; echo -n `pw nextuser`; echo -n "] [y/n]: "; read answer2
				case $answer2 in 
					[y]* ) 	if \
							echo "$username:::::::::$password" | adduser -f - && \
							pw groupmod wheel -m $username && \
							pw groupmod operator -m $username; then
							if ! grep -q -E "^[[:space:]]*root[[:space:]]*:" /etc/mail/aliases; then
								cp /etc/mail/aliases /etc/mail/aliases_old && \
								cat /etc/mail/aliases_old | sed -E -e "s/^#[[:space:]]*root[[:space:]]*:.*$/root: $username/" > /etc/mail/aliases && \
								rm /etc/mail/aliases_old && \
								newaliases && \
								echo "+ User $username will receive mails for root now" 
							else
								echo "! Maildelivery for user root will not be changed, maybe you had allready set an alias."
							fi
							break 2;
						else
							break; 
						fi;;
					[n]* ) echo "The user will not be created.";break;;
				esac
			done;;
		[n]* ) break;;
	esac
done


#+ Final information
#
echo " "
echo "You can now restart the system using 'reboot' to boot into your new system."
echo "Have Fun!!"
